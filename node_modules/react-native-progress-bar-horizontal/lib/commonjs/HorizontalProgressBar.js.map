{"version":3,"sources":["HorizontalProgressBar.tsx"],"names":["HorizontalProgressBar","progress","animated","fillColor","unfilledColor","borderWidth","borderColor","borderRadius","width","height","duration","translateXValue","Animated","Value","current","containerWidth","setContainerWidth","layoutHadler","event","nativeEvent","layoutWidth","layout","setValue","Math","abs","progressValue","timing","toValue","easing","Easing","cubic","isInteraction","useNativeDriver","start","styles","container","backgroundColor","transform","translateX"],"mappings":"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","sourcesContent":["import React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react';\nimport { View, LayoutChangeEvent, Animated, Easing } from 'react-native';\n\nimport { styles } from './styles';\nimport type { HorizontalProgressBarProps } from './types';\n\nconst HorizontalProgressBar: FunctionComponent<HorizontalProgressBarProps> = ({\n  progress = 0,\n  animated = true,\n  fillColor = '#000000',\n  unfilledColor = '',\n  borderWidth = 1,\n  borderColor = '#000000',\n  borderRadius = 4,\n  width = null,\n  height = 6,\n  duration = 500,\n}) => {\n  // Animate transform style prop so native driver can be used\n  const translateXValue = useRef(new Animated.Value(0)).current;\n  const [containerWidth, setContainerWidth] = useState(0);\n\n  const layoutHadler = useCallback(\n    (event: LayoutChangeEvent) => {\n      if (width === null) {\n        const { nativeEvent } = event;\n        const layoutWidth = nativeEvent.layout.width;\n\n        translateXValue.setValue(-Math.abs(layoutWidth));\n        setContainerWidth(layoutWidth);\n      }\n    },\n    [translateXValue, width]\n  );\n\n  useEffect(() => {\n    if (width !== null) {\n      translateXValue.setValue(-Math.abs(width));\n      setContainerWidth(width);\n    }\n  }, [translateXValue, width]);\n\n  useEffect(() => {\n    let progressValue = progress;\n\n    if (progressValue > 1) {\n      progressValue = 1;\n    } else if (progressValue < 0) {\n      progressValue = 0;\n    }\n\n    if (!animated) {\n      translateXValue.setValue(\n        -Math.abs(containerWidth * progressValue - containerWidth)\n      );\n      return;\n    }\n\n    Animated.timing(translateXValue, {\n      toValue: -Math.abs(containerWidth * progressValue - containerWidth),\n      duration,\n      easing: Easing.cubic,\n      isInteraction: true,\n      useNativeDriver: true,\n    }).start();\n  }, [translateXValue, containerWidth, progress, animated, duration]);\n\n  return (\n    <View\n      style={{\n        ...styles.container,\n        ...(unfilledColor ? { backgroundColor: unfilledColor } : {}),\n        ...(width ? { width } : {}),\n        height,\n        borderWidth,\n        borderColor,\n        borderRadius,\n      }}\n      onLayout={layoutHadler}\n    >\n      {containerWidth !== 0 && (\n        <Animated.View\n          style={{\n            ...styles.progress,\n            backgroundColor: fillColor,\n            borderRadius,\n            transform: [{ translateX: translateXValue }],\n          }}\n        />\n      )}\n    </View>\n  );\n};\n\nexport default HorizontalProgressBar;\n"]}