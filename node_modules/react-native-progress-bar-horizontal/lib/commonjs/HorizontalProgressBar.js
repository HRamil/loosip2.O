"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = require("./styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const HorizontalProgressBar = _ref => {
  let {
    progress = 0,
    animated = true,
    fillColor = '#000000',
    unfilledColor = '',
    borderWidth = 1,
    borderColor = '#000000',
    borderRadius = 4,
    width = null,
    height = 6,
    duration = 500
  } = _ref;
  // Animate transform style prop so native driver can be used
  const translateXValue = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  const [containerWidth, setContainerWidth] = (0, _react.useState)(0);
  const layoutHadler = (0, _react.useCallback)(event => {
    if (width === null) {
      const {
        nativeEvent
      } = event;
      const layoutWidth = nativeEvent.layout.width;
      translateXValue.setValue(-Math.abs(layoutWidth));
      setContainerWidth(layoutWidth);
    }
  }, [translateXValue, width]);
  (0, _react.useEffect)(() => {
    if (width !== null) {
      translateXValue.setValue(-Math.abs(width));
      setContainerWidth(width);
    }
  }, [translateXValue, width]);
  (0, _react.useEffect)(() => {
    let progressValue = progress;

    if (progressValue > 1) {
      progressValue = 1;
    } else if (progressValue < 0) {
      progressValue = 0;
    }

    if (!animated) {
      translateXValue.setValue(-Math.abs(containerWidth * progressValue - containerWidth));
      return;
    }

    _reactNative.Animated.timing(translateXValue, {
      toValue: -Math.abs(containerWidth * progressValue - containerWidth),
      duration,
      easing: _reactNative.Easing.cubic,
      isInteraction: true,
      useNativeDriver: true
    }).start();
  }, [translateXValue, containerWidth, progress, animated, duration]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: { ..._styles.styles.container,
      ...(unfilledColor ? {
        backgroundColor: unfilledColor
      } : {}),
      ...(width ? {
        width
      } : {}),
      height,
      borderWidth,
      borderColor,
      borderRadius
    },
    onLayout: layoutHadler
  }, containerWidth !== 0 && /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: { ..._styles.styles.progress,
      backgroundColor: fillColor,
      borderRadius,
      transform: [{
        translateX: translateXValue
      }]
    }
  }));
};

var _default = HorizontalProgressBar;
exports.default = _default;
//# sourceMappingURL=HorizontalProgressBar.js.map